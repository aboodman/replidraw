step(connectedClients, mutators, startTimestamp) => void
- tx:
  - get mutations by room
  - step each room, accumulating pokes
- remove processed mutations from pending
- send pokes

stepRoom(mutations, mutators, startTimestamp, executor, pokees) => pokes
- load all affected client records
- get any required catchup pokes
- create cache
- split mutations into frames per startTimestamp
- execute each frame, accumulating pokes
- return pokes

stepFrame(mutations, mutators, cache, version, clientRecords, pokees) => pokes
- create child cache (so can get patch)
- step all mutations
- get patch
- return pokes for everyone in room

stepMutation(mutation, mutators, cache, version, clientRecords)
- create child cache (so can rollback)
- exec
- mutate relevant cr and cookies (little wasteful but easier to reason about)


====


- collect mutations to run
- calculate "mutators" -> clients that have mutated something this run
- sort mutations by room -> the keys of this map are the "affected rooms"
- calculate "affectedClients" -> clients in rooms that will be stepped
- open tx:
  - load all affected clients
    - note: it should not be possible for a mutator to not show up in
      affectedClients because messages cannot be received until after
      connect and because clients cannot change rooms.
  - create DBStorage
  - create EntryCache
  - for each affected room:
    - getVersionForRoom
    - patches.push(stepRoom(mutationsForRoom, mutators, clientRecords, versionForRoom)0

  - calculatePokes(executors, affectedClients)









- file a bug about schema validating mutations
- make connect fire a poke / double as pull
- fix databaseSetup
- figure out backoff some other way
- getObject->getValue
x make use of docID/documentID/roomID consistent! (let's use room)
x the batched transactions in push don't discard state!
  x fix clientid at same time


x remove pushRes and pull from protocol and server impl
x remove animation and try it
x move replidraw to heroku
x move replidraw to zod
====
x move replidraw to a socket
====
x bring the Replicache.poke() pr back to life
x test computePoke
x test push
- unit test pull
- unit test connect
x manual test server using postman
x maybe fix up stats printing in push
x integrate!
====
- add timing to poke without queuing/loop
- add loop


bonus
- what would be really cool is if the mutators validated their inputs using zod too!
- not sure how to do this
- if ts-to-zod worked it would be ideal!
